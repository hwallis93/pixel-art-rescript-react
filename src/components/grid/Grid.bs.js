// Generated by ReScript, PLEASE EDIT WITH CARE

import * as CssJs from "bs-css-emotion/src/CssJs.bs.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Redux$RescriptReactIntro from "../../store/Redux.bs.js";

function cellContainer(colour, showBorder) {
  var border = showBorder ? CssJs.border(CssJs.px(1), "dashed", CssJs.hex("666666")) : CssJs.border(CssJs.px(0), "dashed", "transparent");
  return CssJs.style([
              CssJs.backgroundColor(CssJs.hex(colour.replace("#", ""))),
              border
            ]);
}

function gridContainer(cells, size) {
  return CssJs.style([
              CssJs.display("grid"),
              CssJs.gridAutoFlow("column"),
              CssJs.gridTemplateRows([{
                      NAME: "repeat",
                      VAL: [
                        {
                          NAME: "num",
                          VAL: cells
                        },
                        "auto"
                      ]
                    }]),
              CssJs.width(CssJs.px(size)),
              CssJs.height(CssJs.px(size))
            ]);
}

var Styles = {
  cellContainer: cellContainer,
  gridContainer: gridContainer
};

var useSelector = Redux$RescriptReactIntro.Store.useSelector;

function pickedColour(state) {
  return state.settings.paintColour;
}

function showBorder(state) {
  return state.settings.showGridLines;
}

function Grid$Cell(Props) {
  var colour = Props.colour;
  var coordinates = Props.coordinates;
  var dispatch = Curry._1(Redux$RescriptReactIntro.Store.useDispatch, undefined);
  var pickedColour$1 = Curry._1(useSelector, pickedColour);
  var showBorder$1 = Curry._1(useSelector, showBorder);
  var handleClick = function (param) {
    return Curry._1(dispatch, {
                TAG: /* SetCellColour */2,
                colour: pickedColour$1,
                coordinates: coordinates
              });
  };
  var handleRightClick = function ($$event) {
    $$event.preventDefault();
    return Curry._1(dispatch, {
                TAG: /* SetPaintColour */0,
                _0: colour
              });
  };
  return React.createElement("div", {
              className: cellContainer(colour, showBorder$1),
              onClick: handleClick,
              onContextMenu: handleRightClick
            });
}

var Cell = {
  pickedColour: pickedColour,
  showBorder: showBorder,
  make: Grid$Cell
};

function gridCells(state) {
  return state.grid.gridRows;
}

function gridDimension(state) {
  return state.grid.dimension;
}

function Grid(Props) {
  var gridCells$1 = Curry._1(useSelector, gridCells);
  var gridDimension$1 = Curry._1(useSelector, gridDimension);
  return React.createElement("div", {
              className: gridContainer(gridCells$1.length, gridDimension$1)
            }, gridCells$1.map(function (row, rowIndex) {
                  return row.map(function (cell, colIndex) {
                              return React.createElement(Grid$Cell, {
                                          colour: cell,
                                          coordinates: [
                                            rowIndex,
                                            colIndex
                                          ]
                                        });
                            });
                }));
}

var make = Grid;

export {
  Styles ,
  useSelector ,
  Cell ,
  gridCells ,
  gridDimension ,
  make ,
  
}
/* CssJs Not a pure module */
