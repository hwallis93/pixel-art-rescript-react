// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Reductive from "reductive/src/reductive.bs.js";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as Caml_array from "bs-platform/lib/es6/caml_array.js";
import * as ReductiveContext from "reductive/src/reductiveContext.bs.js";

var preloadedState_grid = {
  gridRows: Belt_Array.makeBy(8, (function (param) {
          return Belt_Array.make(8, "#ffffff");
        })),
  dimension: 1000
};

var preloadedState_settings = {
  paintColour: "#000000",
  showGridLines: true
};

var preloadedState = {
  grid: preloadedState_grid,
  settings: preloadedState_settings
};

function reducer(state, action) {
  if (typeof action === "number") {
    var init = state.settings;
    return {
            grid: state.grid,
            settings: {
              paintColour: init.paintColour,
              showGridLines: !state.settings.showGridLines
            }
          };
  }
  switch (action.TAG | 0) {
    case /* SetPaintColour */0 :
        var init$1 = state.settings;
        return {
                grid: state.grid,
                settings: {
                  paintColour: action._0,
                  showGridLines: init$1.showGridLines
                }
              };
    case /* SetSize */1 :
        var newSize = action._0;
        var oldSize = state.grid.gridRows.length;
        var sizeChange = newSize - oldSize | 0;
        var gridRows = sizeChange > 0 ? state.grid.gridRows.map(function (row) {
                  return row.concat(Belt_Array.make(sizeChange, "#ffffff"));
                }).concat(Belt_Array.makeBy(sizeChange, (function (param) {
                      return Belt_Array.make(newSize, "#ffffff");
                    }))) : (
            sizeChange < 0 ? state.grid.gridRows.map(function (row) {
                      return row.slice(0, sizeChange);
                    }).slice(0, sizeChange) : state.grid.gridRows.slice()
          );
        var init$2 = state.grid;
        return {
                grid: {
                  gridRows: gridRows,
                  dimension: init$2.dimension
                },
                settings: state.settings
              };
    case /* SetCellColour */2 :
        var coordinates = action.coordinates;
        var gridRows$1 = state.grid.gridRows.slice();
        Caml_array.set(Caml_array.get(gridRows$1, coordinates[0]), coordinates[1], action.colour);
        var init$3 = state.grid;
        return {
                grid: {
                  gridRows: gridRows$1,
                  dimension: init$3.dimension
                },
                settings: state.settings
              };
    case /* SetDimension */3 :
        var init$4 = state.grid;
        return {
                grid: {
                  gridRows: init$4.gridRows,
                  dimension: action._0
                },
                settings: state.settings
              };
    
  }
}

var store = Reductive.Store.create(reducer, preloadedState, undefined, undefined);

var include = ReductiveContext.Make({});

var Store = include;

export {
  preloadedState ,
  reducer ,
  store ,
  Store ,
  
}
/* preloadedState Not a pure module */
