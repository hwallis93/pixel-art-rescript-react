// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as Caml_array from "bs-platform/lib/es6/caml_array.js";
import * as Toolkit from "@reduxjs/toolkit";

var white = "#ffffff";

function map(prim, prim$1) {
  return prim.map(Curry.__1(prim$1));
}

function slice(prim, prim$1, prim$2) {
  return prim.slice(prim$1, prim$2);
}

var initialState = {
  gridRows: Belt_Array.make(8, Belt_Array.make(8, white)),
  dimension: 0
};

function reducers_setSize(state, action) {
  var newSize = action.payload;
  var oldSize = state.gridRows.length;
  var sizeChange = newSize - oldSize | 0;
  if (sizeChange > 0) {
    console.log("Growing by " + sizeChange.toString());
    state.gridRows = state.gridRows.map(function (row) {
          var newEntries = Belt_Array.make(sizeChange, white);
          return row.concat(newEntries);
        });
  }
  if (sizeChange < 0) {
    console.log("Shrinking by " + sizeChange.toString());
    state.gridRows = state.gridRows.map(function (row) {
          return row.slice(0, sizeChange);
        });
    state.gridRows = state.gridRows.slice(0, sizeChange);
    return ;
  }
  
}

function reducers_setCellColour(state, action) {
  var match = action.payload;
  var match$1 = match.coordinates;
  return Caml_array.set(Caml_array.get(state.gridRows, match$1[0]), match$1[1], match.colour);
}

function reducers_setDimension(state, action) {
  state.dimension = action.payload;
  
}

var reducers = {
  setSize: reducers_setSize,
  setCellColour: reducers_setCellColour,
  setDimension: reducers_setDimension
};

var gridSlice = Toolkit.createSlice({
      name: "grid",
      initialState: initialState,
      reducers: reducers
    });

var makeArray = Belt_Array.make;

export {
  white ,
  map ,
  slice ,
  makeArray ,
  initialState ,
  reducers ,
  gridSlice ,
  
}
/* initialState Not a pure module */
