// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as Caml_array from "bs-platform/lib/es6/caml_array.js";

function length(prim) {
  return prim.length;
}

function map(prim, prim$1) {
  return prim.map(Curry.__1(prim$1));
}

function concat(prim, prim$1) {
  return prim.concat(prim$1);
}

function slice(prim, prim$1, prim$2) {
  return prim.slice(prim$1, prim$2);
}

function copy(prim) {
  return prim.slice();
}

var initialState = {
  gridRows: Belt_Array.makeBy(8, (function (param) {
          return Belt_Array.make(8, "#ffffff");
        })),
  dimension: 0
};

function reducer(state, action) {
  switch (action.TAG | 0) {
    case /* SetDimension */0 :
        return {
                gridRows: state.gridRows,
                dimension: action._0
              };
    case /* SetCellColour */1 :
        var coordinates = action.coordinates;
        var gridRows = state.gridRows.slice();
        Caml_array.set(Caml_array.get(gridRows, coordinates[0]), coordinates[1], action.colour);
        return {
                gridRows: gridRows,
                dimension: state.dimension
              };
    case /* SetSize */2 :
        var newSize = action._0;
        var oldSize = state.gridRows.length;
        var sizeChange = newSize - oldSize | 0;
        var gridRows$1 = sizeChange > 0 ? state.gridRows.map(function (row) {
                  return row.concat(Belt_Array.make(sizeChange, "#ffffff"));
                }).concat(Belt_Array.makeBy(sizeChange, (function (param) {
                      return Belt_Array.make(newSize, "#ffffff");
                    }))) : (
            sizeChange < 0 ? state.gridRows.map(function (row) {
                      return row.slice(0, sizeChange);
                    }).slice(0, sizeChange) : state.gridRows.slice()
          );
        return {
                gridRows: gridRows$1,
                dimension: state.dimension
              };
    
  }
}

var makeArray = Belt_Array.make;

export {
  length ,
  map ,
  concat ,
  slice ,
  copy ,
  makeArray ,
  initialState ,
  reducer ,
  
}
/* initialState Not a pure module */
